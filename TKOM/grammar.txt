program             : { function }
                    ;

function            : ( "void" | type ) IDENTIFIER "(" [param_list] ")" block
                    ;

type                : "int"
                    ;

param_list          : type IDENTIFIER { "," type IDENTIFIER }
                    ;

block               : "{" { statement } "}"
                    ;

const               : INT_CONST
                    ;

statement           : simple_statement ";"
                    | block_statement
                    ;
simple_statement    : declaration
                    | function_call
                    | builtin_func_call
                    | return
                    | assignment
                    | throw
                    ;
block_statement     : block
                    | if
                    | while
                    | try_catch_finally
                    ;

declaration         : type declOptAssign { "," decl_opt_assign }
                    ;
decl_opt_assign     : IDENTIFIER [ "=" const ]
                    ;

function_call       : IDENTIFIER "(" [ expression { "," expression } ] ")"
                    ;

builtin_func_call   : "read" "(" IDENTIFIER ")"
                    | "print" "(" ( string | expression ) ")"
                    ;

string              : STRING { "+" ( STRING | const ) }
                    ;

return              : "return" [ expression ]
                    ;

if                  : "if" "(" expression ")" statement [ "else" statement ]
                    ;

while               : "while" "(" expression ")" statement
                    ;

// ================= EXCEPTIONS =================
throw               : "throw" "Exception" "(" expression ")"
                    ;

try_catch_finally   : "try" statement 
                        catch { catch }
                        [ "finally" statement ]
                    ;
catch               : "catch" "Exception" IDENTIFIER [ "when" "(" expression ")" ] statement
                    ;

// ================= OPERATORS =================
expression          : assignment
                    | logicalOr
                    ;

assignment          : lvalue "=" expression
                    ;

logical_or          : logical_or "||" logical_and
                    | logical_and
                    ;

logical_and         : logical_and "&&" in_equality
                    | in_equality
                    ;

in_equality         : in_equality "==" relation
                    | in_equality "!=" relation
                    | relation
                    ;

relation            : relation "<=" additive
                    | relation ">=" additive
                    | relation "<" additive
                    | relation ">" additive
                    | additive
                    ;

additive            : additive "+" multiplicative
                    | additive "-" multiplicative
                    | multiplicative
                    ;

multiplicative      : multiplicative "*" unar
                    | multiplicative "/" unar
                    | unar
                    ;

unar                : "-" unar
                    | "+" unar
                    | "!" unar
                    | const
                    | lvalue
                    | function_call
                    | >>string<< ///
                    | "(" expression ")"
                    ;

lvalue              : IDENTIFIER { "." IDENTIFIER }
                    ;
