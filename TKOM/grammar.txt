program             : { function }
                    ;

function            : ( "void" | type ) IDENTIFIER "(" [paramList] ")" block
                    ;

type                : "int"
                    ;

paramList           : type IDENTIFIER { "," type IDENTIFIER }
                    ;

block               : "{" { statement } "}"
                    ;

const               : INT_CONST
                    ;

statement           : simple_statement ";"
                    | block_statement
                    ;
simple_statement    : declaration
                    | function_call
                    | builtin_func_call
                    | return
                    | assignment
                    | throw
                    ;
block_statement     : block
                    | if
                    | while
                    | try_catch_finally
                    ;

declaration         : type declOptAssign { "," declOptAssign }
                    ;
declOptAssign       : IDENTIFIER [ "=" const ]
                    ;

function_call       : IDENTIFIER "(" { expression { "," expression } } ")"
                    | read
                    | print
                    ;

builtin_func_call   : "read" "(" IDENTIFIER ")"
                    | "print" "(" ( string | expression ) ")"
                    ;

string              : STRING { "+" ( STRING | const ) }
                    ;

return              : "return" [ expression ]
                    ;

if                  : "if" "(" expression ")" statement [ "else" statement ]
                    ;

while               : "while" "(" expression ")" statement
                    ;

// ================= EXCEPTIONS =================
throw               : "throw" "Exception" "(" INT_CONST ")"
                    ;

try_catch_finally   : "try" block 
                        catch { catch }
                        [ "finally" block ]
                    ;
catch               : "catch" "Exception" IDENTIFIER [ "when" "(" expression ")" ] block
                    ;

// ================= OPERATORS =================
expression          : assignment
                    | logicalOr
                    ;

assignment          : lvalue "=" expression
                    ;

logicalOr           : logicalOr "||" logicalAnd
                    | logicalAnd
                    ;

logicalAnd          : logicalAnd "&&" bitOr
                    | bitOr
                    ;

bitOr               : bitOr "|" bitXor
                    | bitXor
                    ;

bitXor              : bitXor "^" bitAnd
                    | bitAnd
                    ;

BitAnd              : BitAnd "&" in_equality
                    : in_equality
                    ;

in_equality         : in_equality "==" relation
                    | in_equality "!=" relation
                    | relation
                    ;

relation            : relation "<=" additive
                    | relation ">=" additive
                    | relation "<" additive
                    | relation ">" additive
                    | additive
                    ;

additive            : additive "+" multiplicative
                    | additive "-" multiplicative
                    | multiplicative
                    ;

multiplicative      : multiplicative "*" unar
                    | multiplicative "/" unar
                    | unar
                    ;

unar                : "-" unar
                    | "~" unar
                    | "!" unar
                    | const
                    | lvalue
                    | function_call
                    | "(" expression ")"
                    ;

lvalue              : { IDENTIFIER "." } IDENTIFIER
                    ;


int fun(int x)
{
    try {
        int A = x / 0;
    } catch Exception ex when (5 == 5) {
        print "\tups!\\\n" + 10;
    } finally {
        return x + 1;
    }
}

void main()
{
    int a, b = 17;
    a = 10;
    int i, j = -89, k;
    j = j + b*2/a - 3;

    read(i);
    if (i < j + !~a && 1 == 1)
        print fun(3);
    else
        print ":)";

    return;
}
