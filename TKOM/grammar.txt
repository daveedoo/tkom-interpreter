program             : { function }
                    ;

function            : ( "void" | type ) IDENTIFIER param_list block
                    ;

type                : "int"
                    ;

param_list          : "(" [ type IDENTIFIER { "," type IDENTIFIER } ] ")"
                    ;

block               : "{" { statement } "}"
                    ;

statement           : simple_statement ";"
                    | block_statement
                    ;
simple_statement    : declaration
                    | return
                    | throw
                    | assignment
                    | function_call
                    ;
block_statement     : if
                    | while
                    | try_catch_finally
                    ;

declaration         : type declOptAssign { "," decl_opt_assign }
                    ;
decl_opt_assign     : IDENTIFIER [ "=" expression ]
                    ;

return              : "return" [ expression ]
                    ;

assignment          : IDENTIFIER "=" expression
                    ;

function_call       : IDENTIFIER "(" [ expression { "," expression } ] ")"
                    ;

if                  : "if" "(" expression ")" statement [ "else" statement ]
                    ;

while               : "while" "(" expression ")" statement
                    ;

// ================= EXCEPTIONS =================
throw               : "throw" "Exception" "(" expression ")"
                    ;

try_catch_finally   : "try" statement 
                        catch { catch }
                        [ "finally" statement ]
                    ;
catch               : "catch" "Exception" IDENTIFIER [ "when" expression ] statement
                    ;

// ================= OPERATORS =================
expression          : logical_or
                    ;

logical_or          : logical_and { "||" logical_and }
                    ;

logical_and         : in_equality { "&&" in_equality }
                    ;

in_equality         : relation [ ( "==" | "!=" ) relation ]
                    ;

relation            : additive [ ( "<=" | ">=" | "<" | ">" ) additive ]
                    ;

additive            : multiplicative { ( "+" | "-" ) multiplicative }
                    ;

multiplicative      : unar { ( "*" | "/" ) unar }
                    ;

unar                : [ "-" | "!" ]
                      ( ( "(" expression ")" ) | atomic )
                    ;

atomic              : const
                    | IDENTIFIER
                    | function_call
                    | string
                    ;

string              : STRING { "+" ( STRING | const ) }
                    ;
